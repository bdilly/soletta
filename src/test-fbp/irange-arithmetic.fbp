# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

augend(constant/int:value=7)
addend(constant/int:value=3)
sum(constant/int:value=10)

augend OUT -> OPERAND[0] add(int/addition)
addend OUT -> OPERAND[1] add
add OUT -> IN[0] equal_sum(int/equal)
sum OUT -> IN[1] equal_sum
equal_sum OUT -> RESULT r_sum(test/result)

minuend(constant/int:value=12)
subtrahend(constant/int:value=10)
difference(constant/int:value=2)

minuend OUT -> MINUEND sub(int/subtraction)
subtrahend OUT -> SUBTRAHEND sub
sub OUT -> IN[0] equal_sub(int/equal)
difference OUT -> IN[1] equal_sub
equal_sub OUT -> RESULT r_sub(test/result)

multiplicand(test/int-generator:sequence="0 1 2",interval=20)
multiplier(test/int-generator:sequence="0 1 2 -1",interval=20)
product(test/int-validator:sequence="0 0 1 2 4 -2")

multiplicand OUT -> OPERAND[0] mul(int/multiplication)
multiplier OUT -> OPERAND[1] mul
mul OUT -> IN product OUT -> RESULT r_mul(test/result)

dividend(constant/int:value=12)
divisor(constant/int:value=3)
dividend2(constant/int:value=INT32_MIN)
divisor2(constant/int:value=-1)
quotient(test/int-validator:sequence="4 -715827882")
remainder(constant/int:value=0)

dividend OUT -> DIVIDEND div(int/division)
dividend2 OUT -> DIVIDEND div
divisor OUT -> DIVISOR div
divisor2 OUT -> DIVISOR div
div OUT -> IN quotient OUT -> RESULT r_div(test/result)

dividend OUT -> DIVIDEND mod(int/modulo)
divisor OUT -> DIVISOR mod
mod OUT -> IN[0] equal_mod(int/equal)
remainder OUT -> IN[1] equal_mod
equal_mod OUT -> RESULT r_mod(test/result)
